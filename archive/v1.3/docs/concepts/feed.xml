<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concepts on Istio</title><link>/v1.3/docs/concepts/</link><description>Recent content in Concepts on Istio</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/v1.3/docs/concepts/feed.xml" rel="self" type="application/rss+xml"/><item><title>What is Istio?</title><link>/v1.3/docs/concepts/what-is-istio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/concepts/what-is-istio/</guid><description>Cloud platforms provide a wealth of benefits for the organizations that use them. However, there’s no denying that adopting the cloud can put strains on DevOps teams. Developers must use microservices to architect for portability, meanwhile operators are managing extremely large hybrid and multi-cloud deployments. Istio lets you connect, secure, control, and observe services.
At a high level, Istio helps reduce the complexity of these deployments, and eases the strain on your development teams.</description></item><item><title>Traffic Management</title><link>/v1.3/docs/concepts/traffic-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/concepts/traffic-management/</guid><description>Istio’s traffic routing rules let you easily control the flow of traffic and API calls between services. Istio simplifies configuration of service-level properties like circuit breakers, timeouts, and retries, and makes it easy to set up important tasks like A/B testing, canary rollouts, and staged rollouts with percentage-based traffic splits. It also provides out-of-box failure recovery features that help make your application more robust against failures of dependent services or the network.</description></item><item><title>Policies and Security</title><link>/v1.3/docs/concepts/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/concepts/security/</guid><description>Breaking down a monolithic application into atomic services offers various benefits, including better agility, better scalability and better ability to reuse services. However, microservices also have particular security needs:
To defend against the man-in-the-middle attack, they need traffic encryption.
To provide flexible service access control, they need mutual TLS and fine-grained access policies.
To audit who did what at what time, they need auditing tools.
Istio Security tries to provide a comprehensive security solution to solve all these issues.</description></item><item><title>Observability</title><link>/v1.3/docs/concepts/observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/concepts/observability/</guid><description>Istio generates detailed telemetry for all service communications within a mesh. This telemetry provides observability of service behavior, empowering operators to troubleshoot, maintain, and optimize their applications &amp;ndash; without imposing any additional burdens on service developers. Through Istio, operators gain a thorough understanding of how monitored services are interacting, both with other services and with the Istio components themselves.
Istio generates the following types of telemetry in order to provide overall service mesh observability:</description></item><item><title>Performance and Scalability</title><link>/v1.3/docs/concepts/performance-and-scalability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/concepts/performance-and-scalability/</guid><description>Istio makes it easy to create a network of deployed services with rich routing, load balancing, service-to-service authentication, monitoring, and more - all without any changes to the application code. Istio strives to provide these benefits with minimal resource overhead and aims to support very large meshes with high request rates while adding minimal latency.
The Istio data plane components, the Envoy proxies, handle data flowing through the system. The Istio control plane components, Pilot, Galley and Citadel, configure the data plane.</description></item><item><title>Deployment Models</title><link>/v1.3/docs/concepts/deployment-models/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/concepts/deployment-models/</guid><description>Important system models impact your overall Istio deployment model. This page discusses the options for each of these models and describes how you can configure Istio to address them.
Cluster models The workload instances of your application run in one or more clusters. For isolation, performance, and high availability, you can confine clusters to availability zones and regions.
Production systems, depending on their requirements, can run across multiple clusters spanning a number of zones or regions, leveraging cloud load balancers to handle things like locality and zonal or regional fail over.</description></item></channel></rss>