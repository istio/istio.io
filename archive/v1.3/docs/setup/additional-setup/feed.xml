<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>More Guides on Istio</title><link>/v1.3/docs/setup/additional-setup/</link><description>Recent content in More Guides on Istio</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/v1.3/docs/setup/additional-setup/feed.xml" rel="self" type="application/rss+xml"/><item><title>Pods and Services</title><link>/v1.3/docs/setup/additional-setup/requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/setup/additional-setup/requirements/</guid><description>To be a part of an Istio service mesh, pods and services in a Kubernetes cluster must satisfy the following requirements:
Named service ports: Service ports must be named. The port name key/value pairs must have the following syntax: name: &amp;lt;protocol&amp;gt;[-&amp;lt;suffix&amp;gt;]. To take advantage of Istio&amp;rsquo;s routing features, replace &amp;lt;protocol&amp;gt; with one of the following values:
grpc http http2 https mongo mysql redis tcp tls udp For example, name: http2-foo or name: http are valid port names, but name: http2foo is not.</description></item><item><title>Installation Configuration Profiles</title><link>/v1.3/docs/setup/additional-setup/config-profiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/setup/additional-setup/config-profiles/</guid><description>This page describes the built-in configuration profiles that can be used when installing Istio using helm. The profiles provide customization of the Istio control plane and of the sidecars for the Istio data plane. You can start with one of Istioâ€™s built-in configuration profiles and then further customize the configuration for your specific needs. The following built-in configuration profiles are currently available:
default: enables components according to the default Installation Options (recommend for production deployments).</description></item><item><title>Installing the Sidecar</title><link>/v1.3/docs/setup/additional-setup/sidecar-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/setup/additional-setup/sidecar-injection/</guid><description>Injection In order to take advantage of all of Istio&amp;rsquo;s features, pods in the mesh must be running an Istio sidecar proxy.
The following sections describe two ways of injecting the Istio sidecar into a pod: manually using the istioctl command or automatically using the Istio sidecar injector.
Manual injection directly modifies configuration, like deployments, and injects the proxy configuration into it.
Automatic injection injects at pod creation time using an admission controller.</description></item><item><title>Install Istio with the Istio CNI plugin</title><link>/v1.3/docs/setup/additional-setup/cni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/setup/additional-setup/cni/</guid><description>Follow this flow to install, configure, and use an Istio mesh using the Istio Container Network Interface (CNI) plugin.
By default Istio injects an initContainer, istio-init, in pods deployed in the mesh. The istio-init container sets up the pod network traffic redirection to/from the Istio sidecar proxy. This requires the user or service-account deploying pods to the mesh to have sufficient Kubernetes RBAC permissions to deploy NET_ADMIN containers. Requiring Istio users to have elevated Kubernetes RBAC permissions is problematic for some organizations&amp;rsquo; security compliance.</description></item></channel></rss>