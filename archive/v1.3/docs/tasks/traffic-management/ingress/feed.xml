<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ingress on Istio</title><link>/v1.3/docs/tasks/traffic-management/ingress/</link><description>Recent content in Ingress on Istio</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/v1.3/docs/tasks/traffic-management/ingress/feed.xml" rel="self" type="application/rss+xml"/><item><title>Ingress Gateways</title><link>/v1.3/docs/tasks/traffic-management/ingress/ingress-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/tasks/traffic-management/ingress/ingress-control/</guid><description>In a Kubernetes environment, the Kubernetes Ingress Resource is used to specify services that should be exposed outside the cluster. In an Istio service mesh, a better approach (which also works in both Kubernetes and other environments) is to use a different configuration model, namely Istio Gateway. A Gateway allows Istio features such as monitoring and route rules to be applied to traffic entering the cluster.
This task describes how to configure Istio to expose a service outside of the service mesh using an Istio Gateway.</description></item><item><title>Secure Gateways (File Mount)</title><link>/v1.3/docs/tasks/traffic-management/ingress/secure-ingress-mount/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/tasks/traffic-management/ingress/secure-ingress-mount/</guid><description>The Control Ingress Traffic task describes how to configure an ingress gateway to expose an HTTP service to external traffic. This task shows how to expose a secure HTTPS service using either simple or mutual TLS.
The TLS required private key, server certificate, and root certificate, are configured using a file mount based approach.
Before you begin Perform the steps in the Before you begin and Determining the ingress IP and ports sections of the Control Ingress Traffic task.</description></item><item><title>Secure Gateways (SDS)</title><link>/v1.3/docs/tasks/traffic-management/ingress/secure-ingress-sds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/tasks/traffic-management/ingress/secure-ingress-sds/</guid><description>The Control Ingress Traffic task describes how to configure an ingress gateway to expose an HTTP service to external traffic. This task shows how to expose a secure HTTPS service using either simple or mutual TLS.
The TLS required private key, server certificate, and root certificate, are configured using the Secret Discovery Service (SDS).
Before you begin Perform the steps in the Before you begin and Determining the ingress IP and ports sections of the Control Ingress Traffic task.</description></item><item><title>Ingress Gateway without TLS Termination</title><link>/v1.3/docs/tasks/traffic-management/ingress/ingress-sni-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/tasks/traffic-management/ingress/ingress-sni-passthrough/</guid><description>The Securing Gateways with HTTPS task describes how to configure HTTPS ingress access to an HTTP service. This example describes how to configure HTTPS ingress access to an HTTPS service, i.e., configure an ingress gateway to perform SNI passthrough, instead of TLS termination on incoming requests.
The example HTTPS service used for this task is a simple NGINX server. In the following steps you first deploy the NGINX service in your Kubernetes cluster.</description></item><item><title>Kubernetes Ingress with Cert-Manager</title><link>/v1.3/docs/tasks/traffic-management/ingress/ingress-certmgr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/tasks/traffic-management/ingress/ingress-certmgr/</guid><description>This example demonstrates the use of Istio as a secure Kubernetes Ingress controller with TLS certificates issued by Let&amp;rsquo;s Encrypt. While more powerful Istio concepts such as gateway and virtual service should be used for advanced traffic management, optional support of the Kubernetes Ingress is also available and can be used to simplify integration of legacy and third-party solutions into a service mesh and benefit from extensive telemetry and tracing capabilities that Istio provides.</description></item></channel></rss>