<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Traffic Management on Istio</title><link>/v1.3/docs/tasks/traffic-management/</link><description>Recent content in Traffic Management on Istio</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/v1.3/docs/tasks/traffic-management/feed.xml" rel="self" type="application/rss+xml"/><item><title>Request Routing</title><link>/v1.3/docs/tasks/traffic-management/request-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/tasks/traffic-management/request-routing/</guid><description>This task shows you how to route requests dynamically to multiple versions of a microservice.
Before you begin Setup Istio by following the instructions in the Installation guide.
Deploy the Bookinfo sample application.
Review the Traffic Management concepts doc. Before attempting this task, you should be familiar with important terms such as destination rule, virtual service, and subset.
About this task The Istio Bookinfo sample consists of four separate microservices, each with multiple versions.</description></item><item><title>Fault Injection</title><link>/v1.3/docs/tasks/traffic-management/fault-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/tasks/traffic-management/fault-injection/</guid><description>This task shows you how to inject faults to test the resiliency of your application.
Before you begin Set up Istio by following the instructions in the Installation guide.
Deploy the Bookinfo sample application including the default destination rules.
Review the fault injection discussion in the Traffic Management concepts doc.
Apply application version routing by either performing the request routing task or by running the following commands:</description></item><item><title>Traffic Shifting</title><link>/v1.3/docs/tasks/traffic-management/traffic-shifting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/tasks/traffic-management/traffic-shifting/</guid><description>This task shows you how to gradually migrate traffic from one version of a microservice to another. For example, you might migrate traffic from an older version to a new version.
A common use case is to migrate traffic gradually from one version of a microservice to another. In Istio, you accomplish this goal by configuring a sequence of rules that route a percentage of traffic to one service or another.</description></item><item><title>TCP Traffic Shifting</title><link>/v1.3/docs/tasks/traffic-management/tcp-traffic-shifting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/tasks/traffic-management/tcp-traffic-shifting/</guid><description>This task shows you how to gradually migrate TCP traffic from one version of a microservice to another. For example, you might migrate TCP traffic from an older version to a new version.
A common use case is to migrate TCP traffic gradually from one version of a microservice to another. In Istio, you accomplish this goal by configuring a sequence of rules that route a percentage of TCP traffic to one service or another.</description></item><item><title>Request Timeouts</title><link>/v1.3/docs/tasks/traffic-management/request-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/tasks/traffic-management/request-timeouts/</guid><description>This task shows you how to setup request timeouts in Envoy using Istio.
Before you begin Setup Istio by following the instructions in the Installation guide.
Deploy the Bookinfo sample application including the default destination rules.
Initialize the application version routing by running the following command:
Zip$ kubectl apply -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@ Request timeouts A timeout for http requests can be specified using the timeout field of the route rule.</description></item><item><title>Circuit Breaking</title><link>/v1.3/docs/tasks/traffic-management/circuit-breaking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/tasks/traffic-management/circuit-breaking/</guid><description>This task shows you how to configure circuit breaking for connections, requests, and outlier detection.
Circuit breaking is an important pattern for creating resilient microservice applications. Circuit breaking allows you to write applications that limit the impact of failures, latency spikes, and other undesirable effects of network peculiarities.
In this task, you will configure circuit breaking rules and then test the configuration by intentionally &amp;ldquo;tripping&amp;rdquo; the circuit breaker.
Before you begin Setup Istio by following the instructions in the Installation guide.</description></item><item><title>Mirroring</title><link>/v1.3/docs/tasks/traffic-management/mirroring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v1.3/docs/tasks/traffic-management/mirroring/</guid><description>This task demonstrates the traffic mirroring capabilities of Istio.
Traffic mirroring, also called shadowing, is a powerful concept that allows feature teams to bring changes to production with as little risk as possible. Mirroring sends a copy of live traffic to a mirrored service. The mirrored traffic happens out of band of the critical request path for the primary service.
In this task, you will first force all traffic to v1 of a test service.</description></item></channel></rss>