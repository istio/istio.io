{"version":3,"file":"headerAnimation.min.js","names":["THREE","vertexShader","fragmentShader","createCamera","fov","near","far","camPos","x","y","z","camLookAt","aspect","window","innerWidth","innerHeight","camera","PerspectiveCamera","position","set","lookAt","updateProjectionMatrix","createRenderer","rendererProps","container","document","getElementById","renderer","WebGLRenderer","Object","assign","alpha","domElement","id","setPixelRatio","devicePixelRatio","setSize","offsetWidth","offsetHeight","setClearColor","runAnimation","app","scene","enableAnimation","uniforms","getDefaultUniforms","appendChild","addEventListener","u_resolution","value","updateScene","delta","elapsed","clock","Clock","animate","requestAnimationFrame","getDelta","getElapsedTime","u_time","render","initScene","then","info","reset","catch","error","console","log","Scene","antialias","u_pointsize","u_transformation_freq_1","u_transformation_amp_1","u_transformation_speed_1","u_transformation_freq_2","u_transformation_amp_2","u_transformation_speed_2","geometry","PlaneGeometry","material","ShaderMaterial","cameraPosition","transparent","depthTest","mesh","Points","add","rotation","interval","copy"],"sources":["../../src/ts/headerAnimation.js"],"sourcesContent":["import * as THREE from 'three';\n\n// Vertex shader for the points animation\nconst vertexShader = `\n      #define PI 3.14159265359\n  \n      // Uniform variables for time and point size, as well as parameters for two transformations\n      uniform float u_time;\n      uniform float u_pointsize;\n      uniform float u_transformation_amp_1;\n      uniform float u_transformation_freq_1;\n      uniform float u_transformation_speed_1;\n      uniform float u_transformation_amp_2;\n      uniform float u_transformation_freq_2;\n      uniform float u_transformation_speed_2;\n  \n      void main() {\n        // Initialize position with the vertex's original position\n        vec3 pos = position;\n        \n        // Apply two sinusoidal transformations to the z-coordinate of the position\n        pos.z += sin(pos.x * u_transformation_freq_1 + u_time * u_transformation_speed_1) * u_transformation_amp_1;\n        pos.z += cos(pos.y * u_transformation_freq_2 - u_time * u_transformation_speed_2 * 0.6) * u_transformation_amp_2;\n        \n        // Adjust the point size based on the absolute z-coordinate\n        gl_PointSize = max(u_pointsize + abs(pos.z) * 6.0, 0.0);\n        \n        // Apply model-view and projection transformations to the position\n        vec4 mvm = modelViewMatrix * vec4(pos, 1.0);\n        gl_Position = projectionMatrix * mvm;\n      }\n    `;\n\n// Fragment shader for the points animation\nconst fragmentShader = `\n      // Uniform variable for time\n      uniform float u_time;\n      #ifdef GL_ES\n      precision mediump float;\n      #endif\n  \n      void main() {\n        // Calculate the distance from the center of the point\n        vec2 st = gl_PointCoord - vec2(0.5);\n        float r = length(st);\n  \n        // Discard fragments outside a circular region\n        if (r > 0.5) {\n          discard;\n        }\n  \n        // Calculate alpha (transparency) based on the depth of the fragment\n        float alpha = 1.0 - gl_FragCoord.z * 1.095;\n        alpha = clamp(alpha, 0.0, 1.0);\n\n        // Set the final fragment color with a blue tone and transparency\n        gl_FragColor = vec4(vec3(0.42, 0.635, 0.835), alpha);\n      }\n    `;\n\n\n// Function to create a camera with specified parameters\nfunction createCamera(\n    fov = 45,\n    near = 0.1,\n    far = 100,\n    camPos = { x: 0, y: 0, z: 0 },\n    camLookAt = { x: 0, y: 0, z: 0 },\n    aspect = window.innerWidth / window.innerHeight\n) {\n    const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    camera.position.set(camPos.x, camPos.y, camPos.z);\n    camera.lookAt(camLookAt.x, camLookAt.y, camLookAt.z);\n    camera.updateProjectionMatrix();\n    return camera;\n}\n\n// Function to create a WebGLRenderer with specified properties\nfunction createRenderer(rendererProps = {}) {\n    const container = document.getElementById(\"banner\");\n    const renderer = new THREE.WebGLRenderer({ ...rendererProps, alpha: true });\n    renderer.domElement.id = \"banner-animation\";\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(container.offsetWidth, container.offsetHeight);\n    renderer.setClearColor(0xffffff, 0);\n    renderer.domElement.id = \"banner-animation\";\n    return renderer;\n}\n\n// Function to run the animation loop\nfunction runAnimation(\n    app,\n    scene,\n    renderer,\n    camera,\n    enableAnimation = false,\n    uniforms = getDefaultUniforms()\n) {\n    // Append banner-animation canvas to banner\n    const container = document.getElementById(\"banner\");\n    container.appendChild(renderer.domElement);\n\n    // Register resize listener\n    window.addEventListener(\"resize\", () => {\n        let container = document.getElementById(\"banner\");\n        camera.aspect = container.offsetWidth / container.offsetHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(container.offsetWidth, container.offsetHeight);\n        // Update uniforms.u_resolution\n        if (uniforms.u_resolution !== undefined) {\n            uniforms.u_resolution.value.x =\n                window.innerWidth * window.devicePixelRatio;\n            uniforms.u_resolution.value.y =\n                window.innerHeight * window.devicePixelRatio;\n        }\n    });\n\n    // If the updateScene function is not defined in the app, assign an empty function\n    if (app.updateScene === undefined) {\n        app.updateScene = (delta, elapsed) => { };\n    }\n    Object.assign(app, { ...app, container });\n\n    const clock = new THREE.Clock();\n    const animate = () => {\n        if (enableAnimation) {\n            requestAnimationFrame(animate);\n        }\n\n        const delta = clock.getDelta();\n        const elapsed = clock.getElapsedTime();\n        uniforms.u_time.value = elapsed;\n\n        // Call the app's updateScene function and render the scene\n        app.updateScene(delta, elapsed);\n        renderer.render(scene, camera);\n    };\n\n    // Initialize the scene, start the animation loop, and reset renderer info\n    app\n        .initScene()\n        .then(animate)\n        .then(() => {\n            renderer.info.reset();\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n}\n\n// Create a new THREE scene, renderer, and camera\nlet scene = new THREE.Scene();\nlet renderer = createRenderer({ antialias: false });\nlet camera = createCamera(60, 1, 100, { x: 0, y: 0, z: 4.5 });\n\n// Define uniform variables for the shaders\nconst uniforms = {\n    u_time: { value: 0.0 },\n    // Resolution of the canvas (width and height)\n    u_resolution: {\n        value: {\n            x: window.innerWidth * window.devicePixelRatio,\n            y: window.innerHeight * window.devicePixelRatio,\n        },\n    },\n    // Point size for rendering\n    u_pointsize: { value: 6.0 },\n\n    // Parameters for the wave1 animation\n    u_transformation_freq_1: { value: 3.0 },\n    u_transformation_amp_1: { value: 0.8 },\n    u_transformation_speed_1: { value: 0.25 },\n\n    // Parameters for the wave2 animation\n    u_transformation_freq_2: { value: 2.0 },\n    u_transformation_amp_2: { value: 0.7 },\n    u_transformation_speed_2: { value: 0.20 },\n};\n\n// Define the app object containing shaders and scene initialization\nlet app = {\n    vertexShader,\n    fragmentShader,\n\n    async initScene() {\n        // Create a plane geometry for the points\n        this.geometry = new THREE.PlaneGeometry(10, 5, 50, 40);\n\n        // Create a shader material using the provided vertex and fragment shaders\n        const material = new THREE.ShaderMaterial({\n            uniforms: {\n                ...uniforms,\n                cameraPosition: { value: camera.position },\n            },\n            vertexShader: this.vertexShader,\n            fragmentShader: this.fragmentShader,\n            transparent: true,\n            depthTest: false,\n        });\n\n        // Create a points mesh and add it to the scene\n        this.mesh = new THREE.Points(this.geometry, material);\n        scene.add(this.mesh);\n\n        // Set initial rotations for the mesh\n        this.mesh.rotation.x = 3.1415 / 2;\n        this.mesh.rotation.y = 3.1415 / 4;\n    },\n\n    // Update function for the animation loop\n    updateScene(interval, elapsed) {\n        // Update the time uniform and camera position uniform in the shader\n        uniforms.u_time.value += interval * 0.001;\n        this.mesh.material.uniforms.cameraPosition.value.copy(camera.position);\n    },\n};\n\n// Run the animation loop with the defined app, scene, renderer, camera, and uniforms\nrunAnimation(app, scene, renderer, camera, true, uniforms);\n"],"mappings":"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","ignoreList":[]}