#!/usr/bin/env bash

# Copyright Istio Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e
set -u
set -o pipefail

# $snippet my_nginx_app_sidecar_mtls_enabled_apply syntax="bash" outputis="text"
$ kubectl apply -f <(istioctl kube-inject -f @samples/https/nginx-app.yaml@)
# $verify
service/my-nginx created
replicationcontroller/my-nginx created
# $endsnippet

# $snippet sleep_app_sidecar_mtls_enabled_apply syntax="bash" outputis="text"
$ kubectl apply -f <(istioctl kube-inject -f @samples/sleep/sleep.yaml@)
# $verify
serviceaccount/sleep created
service/sleep created
deployment.apps/sleep created
# $endsnippet

kubectl wait --for=condition=available deployment --all --timeout=300s
kubectl wait --for=condition=Ready pod --all --timeout=300s

# $snippet get_pods_sidecar_mtls_enabled_apply syntax="bash" outputis="text"
$ kubectl get pods
# $verify verifier="lineRegex"
NAME *READY *STATUS *RESTARTS *AGE
my-nginx-[0-9a-z]* *2/2 *Running *0
sleep-[0-9a-z]*-[0-9a-z]* *2/2 *Running *0
# $endsnippet

# $snippet curl_sidecar_mtls_enabled_sleep syntax="bash" outputis="text"
$ kubectl exec $(kubectl get pod -l app=sleep -o jsonpath={.items..metadata.name}) -c sleep -- curl https://my-nginx -k
# $verify verifier="contains"
<h1>Welcome to nginx!</h1>
# $endsnippet

# the next command is expected to fail, but don't error out
set +e
set +o pipefail

# $snippet curl_sidecar_mtls_enabled_istio_proxy syntax="bash" outputis="text"
$ kubectl exec $(kubectl get pod -l app=sleep -o jsonpath={.items..metadata.name}) -c istio-proxy -- curl https://my-nginx -k
# $verify verifier="contains" source="stderr"
command terminated with exit code
# $endsnippet

# restore error handling
set -e
set -o pipefail
