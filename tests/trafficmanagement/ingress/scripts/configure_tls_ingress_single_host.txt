#!/usr/bin/env bash

# Copyright Istio Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e
set -u
set -o pipefail

source ${REPO_ROOT}/content/en/docs/tasks/traffic-management/ingress/secure-ingress/snips.sh

echo "Deploying httpbin"

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Service
metadata:
  name: httpbin
  labels:
    app: httpbin
spec:
  ports:
  - name: http
    port: 8000
  selector:
    app: httpbin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
      version: v1
  template:
    metadata:
      labels:
        app: httpbin
        version: v1
    spec:
      containers:
      - image: docker.io/citizenstig/httpbin
        imagePullPolicy: IfNotPresent
        name: httpbin
        ports:
        - containerPort: 8000
EOF

echo "Creating httpbin gateway secrets"

snip_configure_a_tls_ingress_gateway_for_a_single_host_1

echo "Deploying httpbin gateway"

snip_configure_a_tls_ingress_gateway_for_a_single_host_2

echo "Deploying httpbin virtual service"

snip_configure_a_tls_ingress_gateway_for_a_single_host_3

echo "Waiting for httpbin deployment to start"

kubectl wait --for=condition=available deployment --all --timeout=60s
kubectl wait --for=condition=Ready pod --all --timeout=60s

echo "Verifying httpbin deployment"

export SECURE_INGRESS_PORT={{ .secureIngressPortCommand }}
export INGRESS_HOST={{ .ingressHostCommand }}

out=$(snip_configure_a_tls_ingress_gateway_for_a_single_host_4 2>&1)
_verify_contains "$out" "HTTP/2 418" "snip_configure_a_tls_ingress_gateway_for_a_single_host_4"
_verify_contains "$out" "-=[ teapot ]=-" "snip_configure_a_tls_ingress_gateway_for_a_single_host_4"

echo "Deleting httpbin secret and re-creating"

snip_configure_a_tls_ingress_gateway_for_a_single_host_5

snip_configure_a_tls_ingress_gateway_for_a_single_host_6

# Wait for the change to propagate
sleep 5s

echo "Verifying new httpbin credentials"

out=$(snip_configure_a_tls_ingress_gateway_for_a_single_host_7 2>&1)
_verify_contains "$out" "HTTP/2 418" "snip_configure_a_tls_ingress_gateway_for_a_single_host_7"
_verify_contains "$out" "-=[ teapot ]=-" "snip_configure_a_tls_ingress_gateway_for_a_single_host_7"

# The next command is expected to fail, but don't error the script.
set +e
set +o pipefail

echo "Verifying old httpbin credentials no longer work"

out=$(snip_configure_a_tls_ingress_gateway_for_a_single_host_8 2>&1)
_verify_not_contains "$out" "HTTP/2 418" "snip_configure_a_tls_ingress_gateway_for_a_single_host_8"

# Restore error handling
set -e
set -o pipefail
